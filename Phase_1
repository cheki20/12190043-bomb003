The phase_1 takes the standard input, stores it in %eax, and then compares it to the string at $0x4023b0. If theyâ€™re equal, the bomb gets diffused and if not it gets exploded.

The following command has been used to get the assembly code of bomb003:
	objdump -d bomb > bomb.s //bomb.s is the assembly file

The command "strings bomb" will give the list of printable strings in your file.
Followings are few lines of printable strings in bomb file:
	%s: Error: Couldn't open %s
	Usage: %s [<input_file>]
	That's number 2.  Keep going!
	Halfway there!
	Good work!  On to the next...
	Welcome to my fiendish little bomb. You have 6 phases with
	which to blow yourself up. Have a nice day!
	Phase 1 defused. How about the next one?
	So you got that one.  Try this one.
	Border relations with Canada have never been better.
	Wow! You've defused the secret stage!
	So you think you can stop the bomb with ctrl-c, do you?
	Curses, you've found the secret phase!
	But finding it and solving it are quite different...
	Congratulations! You've defused the bomb!
	Well...
	OK. :-)
	Invalid phase%s
	BOOM!!!
	The bomb has blown up.
	%d %d %d %d %d %d
	Error: Premature EOF on stdin
	GRADE_BOMB

Note: I used GNU debugger which is a command line debugger tool available on virtually every platform.
gdb bomb //debugging using GNU debugger which is command line debugger tool
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
//checking if there are any breakponts
(gdb) info break 
No breakpoints or watchpoints.  //there isn't any break points
(gdb) break phase_1			// setting break point at phase_1 
Breakpoint 1 at 0x400e8d

//getting the assembly code of phase_1
(gdb) disas phase_1
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.

(gdb) run //running  the code
Starting program: /home/cheki/Documents/GCIT/5th Semester/Computer SYstems 1/Assignment 1_2/Assignment 1/bomb003/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
just a try                       			//this is a user input string

//the code is not executing as i set a breakpoint at phase_1
Breakpoint 1, 0x0000000000400e8d in phase_1 ()


//p/x command prints the address of the $eax(to check the value at $eax)
(gdb) p/x $eax
$1 = 0x6037a0 						//this is the address of $eax	

//x/s "address" gives the value(s-string) of that particular address	
(gdb) x/s 0x6037a0
0x6037a0 <input_strings>:	"just a try"     	//this register has stored the input that i have provided

//from assembly code <+4> we can see that something is being moved into $esi
(gdb) x/s 0x4023b0					//checking the value at this memory which is being moved into $esi
0x4023b0:	"Border relations with Canada have never been better."  //this might be the ans for phase_2

(gdb) disas					//shortform of disassemble
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:	sub    $0x8,%rsp	    	//building stack frame
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi     	//it will move the value to $esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.


(gdb) until *0x0000000000400e9b			//executing the instructions till that address
0x0000000000400e9b in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>		//it will compare input string with the correct answer
=> 0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.

//from earlier, we know that "Border relations with Canada have never been better." is being moved into %esi, and will be passed into <strings_not_equal>. Let's examine what <strings_not_equal> does:

Dump of assembler code for function strings_not_equal:
=> 0x000000000040130e <+0>:     push   %r12
   0x0000000000401310 <+2>:     push   %rbp
   0x0000000000401311 <+3>:     push   %rbx
   0x0000000000401312 <+4>:     mov    %rdi,%rbx
   0x0000000000401315 <+7>:     mov    %rsi,%rbp
   0x0000000000401318 <+10>:    callq  0x4012f1 <string_length>
   0x000000000040131d <+15>:    mov    %eax,%r12d
   0x0000000000401320 <+18>:    mov    %rbp,%rdi
   0x0000000000401323 <+21>:    callq  0x4012f1 <string_length>
   0x0000000000401328 <+26>:    mov    $0x1,%edx
   0x000000000040132d <+31>:    cmp    %eax,%r12d
   0x0000000000401330 <+34>:    jne    0x401370 <strings_not_equal+98>
   0x0000000000401332 <+36>:    movzbl (%rbx),%eax
   0x0000000000401335 <+39>:    test   %al,%al
   0x0000000000401337 <+41>:    je     0x40135d <strings_not_equal+79>
   0x0000000000401339 <+43>:    cmp    0x0(%rbp),%al
   0x000000000040133c <+46>:    je     0x401347 <strings_not_equal+57>
   0x000000000040133e <+48>:    xchg   %ax,%ax
   0x0000000000401340 <+50>:    jmp    0x401364 <strings_not_equal+86>
   0x0000000000401342 <+52>:    cmp    0x0(%rbp),%al
   0x0000000000401345 <+55>:    jne    0x40136b <strings_not_equal+93>
   0x0000000000401347 <+57>:    add    $0x1,%rbx
   0x000000000040134b <+61>:    add    $0x1,%rbp
   0x000000000040134f <+65>:    movzbl (%rbx),%eax
   0x0000000000401352 <+68>:    test   %al,%al
   
//<Strings_not_equal> doesnt have a call to bomb so it's okay to execute
//Looking at %eax, we see it is = 1, so it will call the bomb.
//it is because i have given the wrong input
(gdb) i r							//displays the information of the registers
rax            0x1                 1
rbx            0x4021e0            4202976
rcx            0xa                 10
rdx            0x1                 1
rsi            0x4023b0            4203440
rdi            0x4023e4            4203492
rbp            0x0                 0x0
rsp            0x7fffffffddf0      0x7fffffffddf0
r8             0x6037a0            6305696
r9             0x7c                124
r10            0xfffffffffffff6ed  -2323
r11            0x7ffff7dfb400      140737352020992
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x283               [ CF SF IF ]
cs             0x33                51
ss             0x2b          

//tried using the string i found in the disassembler code and see the value of %eax for it:
(gdb) i r
rax            0x1                 0 				//it is 0 which means that my answers is correct
rbx            0x4021e0            4202976
rcx            0xa                 10
rdx            0x1                 1
rsi            0x4023b0            4203440
rdi            0x4023e4            4203492

(gdb) delete break					//deleting the break points to run the code again
Delete all breakpoints? (y or n) y
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/cheki/Documents/GCIT/5th Semester/Computer SYstems 1/Assignment 1_2/Assignment 1/bomb003/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better. 		//phase_1 bomb successfully difused
Phase 1 defused. How about the next one?
